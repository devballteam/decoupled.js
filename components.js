// Generated by CoffeeScript 1.8.0

/*

  Simple Registry for storing classes/instances application-wide

  ComponentRegistry.get('articles')                                   // => undefined
  ComponentRegistry.add('articles', ComponentFactory.get('articles'))
  ComponentRegistry.get('articles')                                   // => <CustomComponent>
 */

(function() {
  var ComponentFactory, ComponentRegistry, result, _i, _len, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  ComponentRegistry = (function() {
    function ComponentRegistry() {}

    ComponentRegistry.registry = {};

    ComponentRegistry.add = function(name, component) {
      return ComponentRegistry.registry[name] = component;
    };

    ComponentRegistry.get = function(name) {
      return ComponentRegistry.registry[name];
    };

    return ComponentRegistry;

  })();


  /*
  
    Simple Factory/Facade for creating component classes and getting their instances
  
    ComponentFactory
      .get('articles')                                                         // (1)
      .init(function () { return this.endpoint = 'http://articles.com' })      // (2)
      .method('last', function () { return this.endpoint + '/last.json' })     // (3)
      .instance()                                                              // (4)
      .last()                                                                  // (5)  => 'http://articles.com/last.json'
  
    // (1) Creates class if not yet defined, gets class if already defined
    // (2) Sets initialisation method for Component Class
    // (3) Sets class method
    // (4) Returns new instance of the class
    // (5) Calls previously defined method on the instance and returns the results
  
    ComponentFactory
      .get('articles')                                                         // (6)
      .method('recent', function () { return this.endpoint + '/recent.json' }) // (7)
      .instance()                                                              // (8)
      .recent()                                                                // (9)  => 'http://articles.com/recent.json'
  
    // (6) Gets previously defined class
    // (7) Adds another method to the previously created class ('last' and 'recent' are now available)
    // (8) Returns new instance of the class
    // (9) Calls previously defined method on the instance and returns the results
   */

  ComponentFactory = (function() {
    var CoreComponent;

    ComponentFactory.classes = {};

    ComponentFactory.baseClass = CoreComponent = (function() {
      function CoreComponent(name) {
        var _ref;
        this.name = name;
        if ((_ref = this.init) != null) {
          _ref.apply(this, arguments);
        }
      }

      return CoreComponent;

    })();

    ComponentFactory.get = function(name, constructor) {
      return new ComponentFactory(name);
    };

    function ComponentFactory(name) {
      var CustomComponent, _ref;
      this.name = name;
      this.componentClass = (_ref = ComponentFactory.classes[this.name]) != null ? _ref : ComponentFactory.classes[this.name] = CustomComponent = (function(_super) {
        __extends(CustomComponent, _super);

        function CustomComponent() {
          return CustomComponent.__super__.constructor.apply(this, arguments);
        }

        return CustomComponent;

      })(CoreComponent);
    }

    ComponentFactory.prototype.init = function(init) {
      this.componentClass.prototype.init = init;
      return this;
    };

    ComponentFactory.prototype.method = function(methodName, handler) {
      this.componentClass.prototype[methodName] = handler;
      return this;
    };

    ComponentFactory.prototype.instance = function() {
      return new this.componentClass(this.name);
    };

    return ComponentFactory;

  })();

  _ref = [
    ComponentFactory.get('articles').init(function() {
      return this.endpoint = 'http://articles.com';
    }).method('last', function() {
      return this.endpoint + '/last.json';
    }).instance().last()
  ];
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    result = _ref[_i];
    console.log(result);
  }


  /*
  
  ComponentRegistry
    .get('articles')
    .recent()
    .then(Component.render);
    .then(function (compiled) {
       * Do whatever you want
    });
  
  ComponentFactory
    .create('articles', function (constructor) {
      this.endpoint = 'http://articles.com/recent.json'
    })
    .method('recent', function () {
      return new Promise(function (resolve, reject) {
        $.getJSON(this.endpoint)
          .then(resolve, reject)
      })
    })
   */

}).call(this);
